# This workflow is for a CMake project running on a single platform (macOS ARM64).
name: CMake on macOS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: macos-latest # This runner defaults to ARM64

    strategy:
      fail-fast: false
      matrix:
        # Set up a matrix to explicitly run only the macOS ARM64 configuration
        include:
          - os: macos-latest
            c_compiler: clang

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      # We set the C compiler from the matrix and hardcode the Build Type as Release.
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the Release configuration.
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration.
      run: ctest --build-config Release

    - name: Upload macOS Artifact
      # This step zips and uploads the compiled 'kcc' executable
      uses: actions/upload-artifact@v4
      with:
        # This will be the name of the downloadable .zip file
        name: kcc-macos-arm64
        # This is the path to the 'kcc' executable inside the build directory
        path: ${{ steps.strings.outputs.build-output-dir }}/kcc
